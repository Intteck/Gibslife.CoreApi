// <auto-generated />
using System;
using Gibs.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Gibs7.Migrations.Migrations
{
    [DbContext(typeof(GibsContext))]
    partial class GibsContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Gibs.Domain.Entities.Account", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("AccountID");

                    b.Property<string>("ControlId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("ControlID");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("AccountName");

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Remarks");

                    b.HasKey("Id");

                    b.HasIndex("ControlId");

                    b.ToTable("Accounts", "account");
                });

            modelBuilder.Entity("Gibs.Domain.Entities.Approval", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("UserID");

                    b.Property<string>("ApprovalId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("ApprovalID");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CreatedBy");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedUtc");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("LastModifiedBy");

                    b.Property<DateTime?>("LastModifiedUtc")
                        .HasColumnType("datetime2")
                        .HasColumnName("LastModifiedUtc");

                    b.Property<decimal>("MaxValue")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("MaxValue");

                    b.Property<decimal>("MinValue")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("MinValue");

                    b.HasKey("UserId", "ApprovalId");

                    b.ToTable("Approvals", "security");
                });

            modelBuilder.Entity("Gibs.Domain.Entities.AuditLog", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("AuditLogID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("ActionId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ActionID");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Category");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Description");

                    b.Property<DateTime>("EntryTimeUtc")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedUtc");

                    b.Property<string>("IpAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CreatedIP");

                    b.Property<string>("ModuleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ModuleID");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CreatedBy");

                    b.HasKey("Id");

                    b.ToTable("AuditLog", "security");
                });

            modelBuilder.Entity("Gibs.Domain.Entities.AutoNumber", b =>
                {
                    b.Property<string>("NumType")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BranchID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Format")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<long?>("NextValue")
                        .HasColumnType("bigint");

                    b.Property<string>("RiskID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Sample")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("NumType", "BranchID");

                    b.ToTable("AutoNumbers");
                });

            modelBuilder.Entity("Gibs.Domain.Entities.Blob", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("BlobID");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedUtc");

                    b.Property<byte[]>("Data")
                        .IsRequired()
                        .HasColumnType("varbinary(max)")
                        .HasColumnName("Data");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Description");

                    b.HasKey("Id");

                    b.ToTable("Blobs", "common");
                });

            modelBuilder.Entity("Gibs.Domain.Entities.Branch", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("BranchID");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Address");

                    b.Property<string>("AltName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("AltName");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("BranchName");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Phone");

                    b.Property<string>("RegionId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("RegionID");

                    b.Property<string>("StateId")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("StateID");

                    b.Property<string>("Tag")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Tag");

                    b.HasKey("Id");

                    b.HasIndex("RegionId");

                    b.ToTable("Branches", "common");
                });

            modelBuilder.Entity("Gibs.Domain.Entities.ClaimNotify", b =>
                {
                    b.Property<string>("NotifyNo")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("NotifyNo");

                    b.Property<byte?>("ApprovalStatus")
                        .HasColumnType("tinyint")
                        .HasColumnName("Approval");

                    b.Property<string>("ApprovedBy")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ApprovedBy");

                    b.Property<DateTime?>("ApprovedUtc")
                        .HasColumnType("datetime2")
                        .HasColumnName("ApprovedUtc");

                    b.Property<string>("ClaimNo")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ClaimNo");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("SubmittedBy");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("datetime2")
                        .HasColumnName("SubmittedOn");

                    b.Property<string>("DebitNoteNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("EntryDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("EntryDate");

                    b.Property<decimal>("GrossPremium")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("Premium");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ModifiedBy");

                    b.Property<DateTime?>("LastModifiedUtc")
                        .HasColumnType("datetime2")
                        .HasColumnName("ModifiedOn");

                    b.Property<DateOnly>("LossDate")
                        .HasColumnType("date")
                        .HasColumnName("LossDate");

                    b.Property<string>("LossDetails")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("LossDetails");

                    b.Property<DateOnly>("NotifyDate")
                        .HasColumnType("date")
                        .HasColumnName("NotifyDate");

                    b.Property<decimal>("Outstanding")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("Outstanding");

                    b.Property<string>("PolicyNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("PolicyNo");

                    b.Property<string>("RefDebitNoteNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("refDNCNNo");

                    b.Property<string>("RefReceiptNo")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("RefReceiptNo");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("RegStatus");

                    b.Property<decimal>("SumInsured")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("SumInsured");

                    b.Property<int>("UnderwritenYear")
                        .HasColumnType("int")
                        .HasColumnName("UndYear");

                    b.HasKey("NotifyNo");

                    b.HasIndex("DebitNoteNo");

                    b.ToTable("Master", "claim");
                });

            modelBuilder.Entity("Gibs.Domain.Entities.Class", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("RiskID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("RiskName");

                    b.HasKey("Id");

                    b.ToTable("Risks", "product");
                });

            modelBuilder.Entity("Gibs.Domain.Entities.CommRate", b =>
                {
                    b.Property<string>("RiskOptionId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("RiskOptionID");

                    b.Property<string>("PartyOptionId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("PartyOptionID");

                    b.Property<decimal>("ComRate")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("CommRate");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Remarks");

                    b.Property<decimal>("VatRate")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("VatRate");

                    b.HasKey("RiskOptionId", "PartyOptionId");

                    b.ToTable("Rates", "agency");
                });

            modelBuilder.Entity("Gibs.Domain.Entities.ControlAccount", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("ControlID");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CategoryID");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("EntryType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ControlName");

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Remarks");

                    b.HasKey("Id");

                    b.ToTable("ControlAccounts", "account");
                });

            modelBuilder.Entity("Gibs.Domain.Entities.Customer", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("CustomerID");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Address");

                    b.Property<DateOnly?>("BirthDate")
                        .HasColumnType("date")
                        .HasColumnName("BirthDate");

                    b.Property<string>("CityLGA")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CityLGA");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Country");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Email");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("FirstName");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CustomerName");

                    b.Property<string>("Industry")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Industry");

                    b.Property<DateOnly?>("KycExpiryDate")
                        .HasColumnType("date")
                        .HasColumnName("KycExpiryDate");

                    b.Property<DateOnly?>("KycIssueDate")
                        .HasColumnType("date")
                        .HasColumnName("KycIssueDate");

                    b.Property<string>("KycNumber")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("KycNumber");

                    b.Property<string>("KycTypeId")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("KycTypeID");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("LastName");

                    b.Property<string>("NextOfKin")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ContactPerson");

                    b.Property<string>("OtherNames")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("OtherNames");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Phone");

                    b.Property<string>("PhoneAlt")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("PhoneAlt");

                    b.Property<string>("RiskProfile")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("RiskProfileID");

                    b.Property<string>("StateId")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("StateID");

                    b.Property<string>("TaxNumber")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("TaxNumber");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Title");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CustomerTypeID");

                    b.HasKey("Id");

                    b.ToTable("Customers", "agency");
                });

            modelBuilder.Entity("Gibs.Domain.Entities.DebitNote", b =>
                {
                    b.Property<string>("DebitNoteNo")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("NoteNo");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ApprovalStatus")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Approval");

                    b.Property<string>("ApprovedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ApprovedUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("BranchId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("BranchID");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("CurrencyId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("FxCurrencyID");

                    b.Property<string>("DeclarationNo")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("DeclarationNo");

                    b.Property<decimal>("FxRate")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("FxRate");

                    b.Property<string>("Narration")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Narration");

                    b.Property<string>("PartyId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("PartyID");

                    b.Property<string>("PartyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("PartyName");

                    b.Property<string>("PolicyNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("PolicyNo");

                    b.Property<string>("_noteTypeID")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("NoteTypeID");

                    b.HasKey("DebitNoteNo");

                    b.HasIndex("PolicyNo");

                    b.ToTable("Notes", "agency");
                });

            modelBuilder.Entity("Gibs.Domain.Entities.FxCurrency", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("FxCurrencyID");

                    b.Property<bool>("Active")
                        .HasColumnType("bit")
                        .HasColumnName("Active");

                    b.Property<decimal>("CurrentRate")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("LastRate");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("FxCurrencyName");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Symbol");

                    b.HasKey("Id");

                    b.ToTable("FxCurrencies", "account");
                });

            modelBuilder.Entity("Gibs.Domain.Entities.FxRate", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("FxRateID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CreatedBy");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedUtc");

                    b.Property<string>("CurrencyId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("CurrencyID");

                    b.Property<decimal>("RateValue")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("Value");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId");

                    b.ToTable("FxRates", "account");
                });

            modelBuilder.Entity("Gibs.Domain.Entities.Group", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("GroupID");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("GroupName");

                    b.HasKey("Id");

                    b.ToTable("Groups", "security");
                });

            modelBuilder.Entity("Gibs.Domain.Entities.MarineClause", b =>
                {
                    b.Property<string>("ClauseId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ClauseId");

                    b.ToTable("MarineClauses");
                });

            modelBuilder.Entity("Gibs.Domain.Entities.Marketer", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("MarketerID");

                    b.Property<bool>("Active")
                        .HasColumnType("bit")
                        .HasColumnName("Active");

                    b.Property<string>("ChannelId")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ChannelID");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CreatedBy");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedUtc");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("FullName");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("LastModifiedBy");

                    b.Property<DateTime?>("LastModifiedUtc")
                        .HasColumnType("datetime2")
                        .HasColumnName("LastModifiedUtc");

                    b.Property<string>("SubChannelId")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("SubChannelID");

                    b.HasKey("Id");

                    b.ToTable("Marketers", "agency");
                });

            modelBuilder.Entity("Gibs.Domain.Entities.MemoClause", b =>
                {
                    b.Property<string>("ClauseId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HeaderText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ClauseId");

                    b.ToTable("MemoClauses");
                });

            modelBuilder.Entity("Gibs.Domain.Entities.MidClass", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("MidRiskID");

                    b.Property<string>("ClassId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("RiskID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("MidRiskName");

                    b.HasKey("Id");

                    b.HasIndex("ClassId");

                    b.ToTable("MidRisks", "product");
                });

            modelBuilder.Entity("Gibs.Domain.Entities.MotorClause", b =>
                {
                    b.Property<string>("ClauseId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ClauseId");

                    b.ToTable("MotorClauses");
                });

            modelBuilder.Entity("Gibs.Domain.Entities.Party", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("PartyID");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Address");

                    b.Property<DateOnly?>("BirthDate")
                        .HasColumnType("date")
                        .HasColumnName("BirthDate");

                    b.Property<string>("CityLGA")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CityLGA");

                    b.Property<string>("CommTypeId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CommTypeID");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Country");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Email");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("PartyName");

                    b.Property<DateOnly?>("KycExpiryDate")
                        .HasColumnType("date")
                        .HasColumnName("KycExpiryDate");

                    b.Property<DateOnly?>("KycIssueDate")
                        .HasColumnType("date")
                        .HasColumnName("KycIssueDate");

                    b.Property<string>("KycNumber")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("KycNumber");

                    b.Property<string>("KycTypeId")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("KycTypeID");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("NextOfKin")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ContactPerson");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Phone");

                    b.Property<string>("PhoneAlt")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("PhoneAlt");

                    b.Property<string>("StateId")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("StateID");

                    b.Property<string>("TaxNumber")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("TaxNumber");

                    b.Property<string>("TypeId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("PartyTypeID");

                    b.HasKey("Id");

                    b.HasIndex("TypeId");

                    b.ToTable("Parties", "agency");
                });

            modelBuilder.Entity("Gibs.Domain.Entities.PartyType", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("PartyTypeID");

                    b.Property<string>("CategoryId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CategoryID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("PartyTypeName");

                    b.HasKey("Id");

                    b.ToTable("PartyTypes", "agency");
                });

            modelBuilder.Entity("Gibs.Domain.Entities.Permission", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("PermissionID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("PermissionName");

                    b.HasKey("Id");

                    b.ToTable("Permissions", "security");
                });

            modelBuilder.Entity("Gibs.Domain.Entities.Policy", b =>
                {
                    b.Property<string>("PolicyNo")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("PolicyNo");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CreatedBy");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedUtc");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("LastModifiedBy");

                    b.Property<DateTime?>("LastModifiedUtc")
                        .HasColumnType("datetime2")
                        .HasColumnName("LastModifiedUtc");

                    b.Property<string>("NaicomId")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("NaicomUID");

                    b.Property<long>("SerialNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("SN");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("SerialNo"));

                    b.HasKey("PolicyNo");

                    b.ToTable("Master", "policy");
                });

            modelBuilder.Entity("Gibs.Domain.Entities.PolicyAutoNumber", b =>
                {
                    b.Property<string>("NumType")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RiskID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BranchID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Format")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<long?>("NextValue")
                        .HasColumnType("bigint");

                    b.Property<string>("Sample")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("NumType", "RiskID", "BranchID");

                    b.ToTable("PolicyAutoNumbers");
                });

            modelBuilder.Entity("Gibs.Domain.Entities.PolicyHistory", b =>
                {
                    b.Property<string>("DeclareNo")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("DeclareNo");

                    b.Property<string>("ApprovalStatus")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Approval");

                    b.Property<string>("ApprovedBy")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ApprovedBy");

                    b.Property<DateTime?>("ApprovedUtc")
                        .HasColumnType("datetime2")
                        .HasColumnName("ApprovedUtc");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CreatedBy");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedUtc");

                    b.Property<string>("DebitNoteNo")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("DebitNoteNo");

                    b.Property<string>("Endorsement")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("EndorseTypeID");

                    b.Property<string>("EndorsementNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("EndorseNo");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("LastModifiedBy");

                    b.Property<DateTime?>("LastModifiedUtc")
                        .HasColumnType("datetime2")
                        .HasColumnName("LastModifiedUtc");

                    b.Property<string>("NaicomId")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("NaicomUID");

                    b.Property<string>("PolicyNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("PolicyNo");

                    b.Property<long>("SerialNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("SN");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("SerialNo"));

                    b.HasKey("DeclareNo");

                    b.HasIndex("DebitNoteNo")
                        .IsUnique()
                        .HasFilter("[DebitNoteNo] IS NOT NULL");

                    b.HasIndex("PolicyNo");

                    b.ToTable("Details", "policy");
                });

            modelBuilder.Entity("Gibs.Domain.Entities.PolicySMI", b =>
                {
                    b.Property<string>("DeclareNo")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("DeclareNo");

                    b.Property<string>("SectionId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("SectionID");

                    b.Property<string>("SmiId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("SMIID");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CreatedBy");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedUtc");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Description");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("LastModifiedBy");

                    b.Property<DateTime?>("LastModifiedUtc")
                        .HasColumnType("datetime2")
                        .HasColumnName("LastModifiedUtc");

                    b.Property<decimal>("PremiumRate")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("PremiumRate");

                    b.Property<string>("ProductId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("ProductID");

                    b.Property<long>("SerialNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("SN");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("SerialNo"));

                    b.Property<decimal>("SharePremium")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("SharePremium");

                    b.Property<decimal>("ShareSumInsured")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("ShareSumInsured");

                    b.Property<string>("SmiName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("SMIName");

                    b.Property<decimal>("TotalPremium")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("TotalPremium");

                    b.Property<decimal>("TotalSumInsured")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("TotalSumInsured");

                    b.Property<string>("_policyNo")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("PolicyNo");

                    b.HasKey("DeclareNo", "SectionId", "SmiId");

                    b.HasIndex("ProductId", "SectionId", "SmiId");

                    b.ToTable("SMIs", "policy");
                });

            modelBuilder.Entity("Gibs.Domain.Entities.PolicySection", b =>
                {
                    b.Property<string>("DeclareNo")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("DeclareNo");

                    b.Property<string>("SectionId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("SectionID");

                    b.Property<string>("CertificateNo")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CertificateNo");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CreatedBy");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedUtc");

                    b.Property<decimal>("ItemPremium")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("Premium");

                    b.Property<decimal>("ItemSumInsured")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("SumInsured");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("LastModifiedBy");

                    b.Property<DateTime?>("LastModifiedUtc")
                        .HasColumnType("datetime2")
                        .HasColumnName("LastModifiedUtc");

                    b.Property<string>("ProductId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("ProductID");

                    b.Property<long>("SerialNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("SN");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("SerialNo"));

                    b.HasKey("DeclareNo", "SectionId");

                    b.HasIndex("ProductId", "SectionId");

                    b.ToTable("Sections", "policy");
                });

            modelBuilder.Entity("Gibs.Domain.Entities.Product", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("ProductID");

                    b.Property<string>("AltName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("AltName");

                    b.Property<long>("AutoNumNextClaimNo")
                        .HasColumnType("bigint");

                    b.Property<long>("AutoNumNextNotifyNo")
                        .HasColumnType("bigint");

                    b.Property<string>("ClassId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("RiskID");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("MidClassId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("MidRiskID");

                    b.Property<string>("NaicomCode")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("NaicomCode");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ProductName");

                    b.HasKey("Id");

                    b.HasIndex("ClassId");

                    b.HasIndex("MidClassId");

                    b.ToTable("Master", "product");
                });

            modelBuilder.Entity("Gibs.Domain.Entities.ProductField", b =>
                {
                    b.Property<string>("CodeType")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("CodeTypeID");

                    b.Property<string>("CodeId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("CodeID");

                    b.Property<string>("FieldId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("FieldID");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("DbHistoryField")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("DbHistoryField");

                    b.Property<string>("DbSectionField")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("DbSectionField");

                    b.Property<string>("DefaultValue")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("DefValue");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Description");

                    b.Property<string>("FieldType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("DataTypeID");

                    b.Property<string>("GroupName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Group");

                    b.Property<byte>("IsParent")
                        .HasColumnType("tinyint")
                        .HasColumnName("IsParent");

                    b.Property<byte>("IsRequired")
                        .HasColumnType("tinyint")
                        .HasColumnName("IsRequired");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("MaximumValue")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("MaxValue");

                    b.Property<string>("MinimumValue")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("MinValue");

                    b.Property<short>("SerialNo")
                        .HasColumnType("smallint")
                        .HasColumnName("Serial");

                    b.HasKey("CodeType", "CodeId", "FieldId");

                    b.ToTable("Fields", "product");
                });

            modelBuilder.Entity("Gibs.Domain.Entities.ProductSMI", b =>
                {
                    b.Property<string>("ProductId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("ProductID");

                    b.Property<string>("SectionId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("SectionID");

                    b.Property<string>("SmiId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("SmiID");

                    b.Property<string>("SmiName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("SmiName");

                    b.HasKey("ProductId", "SectionId", "SmiId");

                    b.ToTable("SMIs", "product");
                });

            modelBuilder.Entity("Gibs.Domain.Entities.ProductSection", b =>
                {
                    b.Property<string>("ProductId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("ProductID");

                    b.Property<string>("SectionId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("SectionID");

                    b.Property<string>("SectionName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("SectionName");

                    b.HasKey("ProductId", "SectionId");

                    b.ToTable("Sections", "product");
                });

            modelBuilder.Entity("Gibs.Domain.Entities.Region", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("RegionID");

                    b.Property<string>("AltName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("AltName");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("RegionName");

                    b.HasKey("Id");

                    b.ToTable("Regions", "common");
                });

            modelBuilder.Entity("Gibs.Domain.Entities.Role", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("RoleID");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("RoleName");

                    b.HasKey("Id");

                    b.ToTable("Roles", "security");
                });

            modelBuilder.Entity("Gibs.Domain.Entities.SalesChannel", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("ChannelID");

                    b.Property<string>("AltName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("AltName");

                    b.Property<string>("BranchId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("BranchID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ChannelName");

                    b.HasKey("Id");

                    b.HasIndex("BranchId");

                    b.ToTable("Channels", "common");
                });

            modelBuilder.Entity("Gibs.Domain.Entities.SalesSubChannel", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("SubChannelID");

                    b.Property<string>("AltName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("AltName");

                    b.Property<string>("ChannelId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("ChannelID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("SubChannelName");

                    b.HasKey("Id");

                    b.HasIndex("ChannelId");

                    b.ToTable("SubChannels", "common");
                });

            modelBuilder.Entity("Gibs.Domain.Entities.Setting", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("SettingID");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("DataType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("DataTypeID");

                    b.Property<string>("DefValue")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("DefValue");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("MaxValue")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("MaxValue");

                    b.Property<string>("MinValue")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("MinValue");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("SettingName");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Value");

                    b.HasKey("Id");

                    b.ToTable("Settings", "common");
                });

            modelBuilder.Entity("Gibs.Domain.Entities.Signature", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SignatureID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid>("BlobId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("BlobID");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedUtc");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Description");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("UserID");

                    b.HasKey("Id");

                    b.HasIndex("BlobId");

                    b.HasIndex("UserId");

                    b.ToTable("Signatures", "security");
                });

            modelBuilder.Entity("Gibs.Domain.Entities.TemplateDoc", b =>
                {
                    b.Property<string>("TemplateId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("TemplateID");

                    b.Property<Guid>("BlobId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("BlobID");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CreatedBy");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedUtc");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Description");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("LastModifiedBy");

                    b.Property<DateTime?>("LastModifiedUtc")
                        .HasColumnType("datetime2")
                        .HasColumnName("LastModifiedUtc");

                    b.Property<string>("TypeId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("TypeID");

                    b.HasKey("TemplateId");

                    b.HasIndex("BlobId");

                    b.ToTable("Templates", "policy");
                });

            modelBuilder.Entity("Gibs.Domain.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("UserID");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Address");

                    b.Property<string>("ApiKey")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ApiKey");

                    b.Property<string>("AvatarUrl")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("AvatarUrl");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("FirstName");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("Active");

                    b.Property<DateTime?>("LastLoginUtc")
                        .HasColumnType("datetime2")
                        .HasColumnName("LastLoginDate");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("LastName");

                    b.Property<DateTime?>("PasswordExpiryUtc")
                        .HasColumnType("datetime2")
                        .HasColumnName("PwdExpiryDate");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Password");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Phone");

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Remarks");

                    b.Property<string>("StaffNo")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("StaffNo");

                    b.HasKey("Id");

                    b.ToTable("Users", "security");
                });

            modelBuilder.Entity("GroupUsers", b =>
                {
                    b.Property<string>("GroupID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("GroupID", "UserID");

                    b.HasIndex("UserID");

                    b.ToTable("GroupUsers", "security");
                });

            modelBuilder.Entity("RolePermissions", b =>
                {
                    b.Property<string>("RoleID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PermissionID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("RoleID", "PermissionID");

                    b.HasIndex("PermissionID");

                    b.ToTable("RolePermissions", "security");
                });

            modelBuilder.Entity("Gibs.Domain.Entities.Account", b =>
                {
                    b.HasOne("Gibs.Domain.Entities.ControlAccount", null)
                        .WithMany("Accounts")
                        .HasForeignKey("ControlId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Gibs.Domain.Entities.Approval", b =>
                {
                    b.HasOne("Gibs.Domain.Entities.User", "User")
                        .WithMany("Approvals")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Gibs.Domain.Entities.Branch", b =>
                {
                    b.HasOne("Gibs.Domain.Entities.Region", null)
                        .WithMany("Branches")
                        .HasForeignKey("RegionId");
                });

            modelBuilder.Entity("Gibs.Domain.Entities.ClaimNotify", b =>
                {
                    b.HasOne("Gibs.Domain.Entities.DebitNote", "DebitNote")
                        .WithMany()
                        .HasForeignKey("DebitNoteNo")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.OwnsOne("Gibs.Domain.Entities.BusinessBasics", "Business", b1 =>
                        {
                            b1.Property<string>("ClaimNotifyNotifyNo")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<byte>("AccountingType")
                                .HasColumnType("tinyint");

                            b1.Property<DateOnly>("EndDate")
                                .HasColumnType("date")
                                .HasColumnName("EndDate");

                            b1.Property<decimal>("OurShareRate")
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("A1");

                            b1.Property<DateOnly>("StartDate")
                                .HasColumnType("date")
                                .HasColumnName("StartDate");

                            b1.HasKey("ClaimNotifyNotifyNo");

                            b1.ToTable("Master", "claim");

                            b1.WithOwner()
                                .HasForeignKey("ClaimNotifyNotifyNo");
                        });

                    b.OwnsOne("Gibs.Domain.Entities.BusinessMembers", "Members", b1 =>
                        {
                            b1.Property<string>("ClaimNotifyNotifyNo")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("BranchId")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("BranchID");

                            b1.Property<string>("BranchName")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("BranchName");

                            b1.Property<string>("CustomerId")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("CustomerID");

                            b1.Property<string>("CustomerName")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("CustomerName");

                            b1.Property<string>("MarketerId")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("MarketerName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("PartyId")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("PartyID");

                            b1.Property<string>("PartyName")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("PartyName");

                            b1.Property<string>("ProductId")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("ProductID");

                            b1.Property<string>("ProductName")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("ProductName");

                            b1.HasKey("ClaimNotifyNotifyNo");

                            b1.ToTable("Master", "claim");

                            b1.WithOwner()
                                .HasForeignKey("ClaimNotifyNotifyNo");
                        });

                    b.Navigation("Business")
                        .IsRequired();

                    b.Navigation("DebitNote");

                    b.Navigation("Members")
                        .IsRequired();
                });

            modelBuilder.Entity("Gibs.Domain.Entities.DebitNote", b =>
                {
                    b.HasOne("Gibs.Domain.Entities.Policy", null)
                        .WithMany("DebitNotes")
                        .HasForeignKey("PolicyNo")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.OwnsOne("Gibs.Domain.Entities.NaicomRecord", "Naicom", b1 =>
                        {
                            b1.Property<string>("DebitNoteNo")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("ErrorMessage")
                                .HasColumnType("varchar(max)")
                                .HasColumnName("Z_NAICOM_ERROR");

                            b1.Property<string>("JsonPayload")
                                .HasColumnType("varchar(max)")
                                .HasColumnName("Z_NAICOM_JSON");

                            b1.Property<string>("Status")
                                .IsRequired()
                                .HasColumnType("varchar(20)")
                                .HasColumnName("Z_NAICOM_STATUS");

                            b1.Property<DateTime?>("SubmitDate")
                                .HasColumnType("datetime2")
                                .HasColumnName("Z_NAICOM_SENT_ON");

                            b1.Property<string>("UniqueId")
                                .HasColumnType("varchar(200)")
                                .HasColumnName("Z_NAICOM_UID");

                            b1.HasKey("DebitNoteNo");

                            b1.ToTable("Notes", "agency");

                            b1.WithOwner()
                                .HasForeignKey("DebitNoteNo");
                        });

                    b.Navigation("Naicom");
                });

            modelBuilder.Entity("Gibs.Domain.Entities.FxRate", b =>
                {
                    b.HasOne("Gibs.Domain.Entities.FxCurrency", "Currency")
                        .WithMany("Rates")
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Currency");
                });

            modelBuilder.Entity("Gibs.Domain.Entities.MidClass", b =>
                {
                    b.HasOne("Gibs.Domain.Entities.Class", null)
                        .WithMany("MidClasses")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Gibs.Domain.Entities.Party", b =>
                {
                    b.HasOne("Gibs.Domain.Entities.PartyType", "PartyType")
                        .WithMany("Parties")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("PartyType");
                });

            modelBuilder.Entity("Gibs.Domain.Entities.Policy", b =>
                {
                    b.OwnsOne("Gibs.Domain.Entities.Policy+InsuredFields", "Insured", b1 =>
                        {
                            b1.Property<string>("PolicyNo")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("Address")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("Address");

                            b1.Property<string>("Email")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("Email");

                            b1.Property<string>("Fullname")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("FullName");

                            b1.Property<string>("Phone")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("Phone");

                            b1.Property<string>("PhoneAlt")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("PhoneAlt");

                            b1.HasKey("PolicyNo");

                            b1.ToTable("Master", "policy");

                            b1.WithOwner()
                                .HasForeignKey("PolicyNo");
                        });

                    b.OwnsOne("Gibs.Domain.Entities.BusinessBasics", "Business", b1 =>
                        {
                            b1.Property<string>("PolicyNo")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<byte>("AccountingType")
                                .HasColumnType("tinyint")
                                .HasColumnName("ActTypeID");

                            b1.Property<string>("BusinessType")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("BizTypeID");

                            b1.Property<string>("CollectivePolicyNo")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("CoPolicyNo");

                            b1.Property<int>("CoverDays")
                                .HasColumnType("int")
                                .HasColumnName("CoverDays");

                            b1.Property<DateOnly>("EndDate")
                                .HasColumnType("date")
                                .HasColumnName("EndDate");

                            b1.Property<string>("FxCurrencyId")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("CurrencyID");

                            b1.Property<decimal>("FxRate")
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("CurrencyRate");

                            b1.Property<decimal>("OurShareRate")
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("OurShareRate");

                            b1.Property<string>("SourceType")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("SrcTypeID");

                            b1.Property<int>("StandardCoverDays")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasDefaultValue(365)
                                .HasColumnName("StdCoverDays");

                            b1.Property<DateOnly>("StartDate")
                                .HasColumnType("date")
                                .HasColumnName("StartDate");

                            b1.Property<DateTime>("TransDate")
                                .HasColumnType("datetime2")
                                .HasColumnName("TransDate");

                            b1.HasKey("PolicyNo");

                            b1.ToTable("Master", "policy");

                            b1.WithOwner()
                                .HasForeignKey("PolicyNo");
                        });

                    b.OwnsOne("Gibs.Domain.Entities.BusinessMembers", "Members", b1 =>
                        {
                            b1.Property<string>("PolicyNo")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("BranchId")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("BranchID");

                            b1.Property<string>("BranchName")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("BranchName");

                            b1.Property<string>("ChannelId")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("ChannelID");

                            b1.Property<string>("ChannelName")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("ChannelName");

                            b1.Property<string>("CustomerId")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("CustomerID");

                            b1.Property<string>("CustomerName")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("CustomerName");

                            b1.Property<string>("MarketerId")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("MarketerID");

                            b1.Property<string>("MarketerName")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("MarketerName");

                            b1.Property<string>("PartyId")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("PartyID");

                            b1.Property<string>("PartyName")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("PartyName");

                            b1.Property<string>("ProductId")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("ProductID");

                            b1.Property<string>("ProductName")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("ProductName");

                            b1.Property<string>("SubChannelId")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("SubChannelID");

                            b1.Property<string>("SubChannelName")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("SubChannelName");

                            b1.HasKey("PolicyNo");

                            b1.ToTable("Master", "policy");

                            b1.WithOwner()
                                .HasForeignKey("PolicyNo");
                        });

                    b.OwnsOne("Gibs.Domain.Entities.BusinessPremium", "Premium", b1 =>
                        {
                            b1.Property<string>("PolicyNo")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<decimal>("GrossPremium")
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("GrossPremium");

                            b1.Property<decimal>("GrossPremiumFx")
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("GrossPremiumFx");

                            b1.Property<decimal>("NetProrataPremium")
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("NetPremium");

                            b1.Property<decimal>("ProrataPremium")
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("ProrataPremium");

                            b1.Property<decimal>("SharePremium")
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("SharePremium");

                            b1.Property<decimal>("ShareSumInsured")
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("ShareSumInsured");

                            b1.Property<decimal>("SumInsured")
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("SumInsured");

                            b1.Property<decimal>("SumInsuredFx")
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("SumInsuredFx");

                            b1.Property<decimal>("WholePremium")
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("WholePremium");

                            b1.Property<decimal>("WholeSumInsured")
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("WholeSumInsured");

                            b1.HasKey("PolicyNo");

                            b1.ToTable("Master", "policy");

                            b1.WithOwner()
                                .HasForeignKey("PolicyNo");
                        });

                    b.Navigation("Business")
                        .IsRequired();

                    b.Navigation("Insured")
                        .IsRequired();

                    b.Navigation("Members")
                        .IsRequired();

                    b.Navigation("Premium")
                        .IsRequired();
                });

            modelBuilder.Entity("Gibs.Domain.Entities.PolicyHistory", b =>
                {
                    b.HasOne("Gibs.Domain.Entities.DebitNote", "DebitNote")
                        .WithOne("History")
                        .HasForeignKey("Gibs.Domain.Entities.PolicyHistory", "DebitNoteNo")
                        .OnDelete(DeleteBehavior.ClientNoAction);

                    b.HasOne("Gibs.Domain.Entities.Policy", "Policy")
                        .WithMany("Histories")
                        .HasForeignKey("PolicyNo")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.OwnsOne("Gibs.Domain.Entities.BusinessBasics", "Business", b1 =>
                        {
                            b1.Property<string>("PolicyHistoryDeclareNo")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<byte>("AccountingType")
                                .HasColumnType("tinyint")
                                .HasColumnName("ActTypeID");

                            b1.Property<string>("BusinessType")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("BizTypeID");

                            b1.Property<string>("CollectivePolicyNo")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("CoPolicyNo");

                            b1.Property<int>("CoverDays")
                                .HasColumnType("int")
                                .HasColumnName("CoverDays");

                            b1.Property<DateOnly>("EndDate")
                                .HasColumnType("date")
                                .HasColumnName("EndDate");

                            b1.Property<string>("FxCurrencyId")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("CurrencyID");

                            b1.Property<decimal>("FxRate")
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("CurrencyRate");

                            b1.Property<decimal>("OurShareRate")
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("OurShareRate");

                            b1.Property<string>("SourceType")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("SrcTypeID");

                            b1.Property<int>("StandardCoverDays")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasDefaultValue(365)
                                .HasColumnName("StdCoverDays");

                            b1.Property<DateOnly>("StartDate")
                                .HasColumnType("date")
                                .HasColumnName("StartDate");

                            b1.Property<DateTime>("TransDate")
                                .HasColumnType("datetime2")
                                .HasColumnName("TransDate");

                            b1.HasKey("PolicyHistoryDeclareNo");

                            b1.ToTable("Details", "policy");

                            b1.WithOwner()
                                .HasForeignKey("PolicyHistoryDeclareNo");
                        });

                    b.OwnsOne("Gibs.Domain.Entities.BusinessMembers", "Members", b1 =>
                        {
                            b1.Property<string>("PolicyHistoryDeclareNo")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("BranchId")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("BranchID");

                            b1.Property<string>("BranchName")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("BranchName");

                            b1.Property<string>("ChannelId")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("ChannelID");

                            b1.Property<string>("ChannelName")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("ChannelName");

                            b1.Property<string>("CustomerId")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("CustomerID");

                            b1.Property<string>("CustomerName")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("CustomerName");

                            b1.Property<string>("MarketerId")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("MarketerID");

                            b1.Property<string>("MarketerName")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("MarketerName");

                            b1.Property<string>("PartyId")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("PartyID");

                            b1.Property<string>("PartyName")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("PartyName");

                            b1.Property<string>("ProductId")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("ProductID");

                            b1.Property<string>("ProductName")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("ProductName");

                            b1.Property<string>("SubChannelId")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("SubChannelID");

                            b1.Property<string>("SubChannelName")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("SubChannelName");

                            b1.HasKey("PolicyHistoryDeclareNo");

                            b1.ToTable("Details", "policy");

                            b1.WithOwner()
                                .HasForeignKey("PolicyHistoryDeclareNo");
                        });

                    b.OwnsOne("Gibs.Domain.Entities.BusinessPremium", "Premium", b1 =>
                        {
                            b1.Property<string>("PolicyHistoryDeclareNo")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<decimal>("GrossPremium")
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("GrossPremium");

                            b1.Property<decimal>("GrossPremiumFx")
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("GrossPremiumFx");

                            b1.Property<decimal>("NetProrataPremium")
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("NetPremium");

                            b1.Property<decimal>("ProrataPremium")
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("ProrataPremium");

                            b1.Property<decimal>("SharePremium")
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("SharePremium");

                            b1.Property<decimal>("ShareSumInsured")
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("ShareSumInsured");

                            b1.Property<decimal>("SumInsured")
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("SumInsured");

                            b1.Property<decimal>("SumInsuredFx")
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("SumInsuredFx");

                            b1.Property<decimal>("WholePremium")
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("WholePremium");

                            b1.Property<decimal>("WholeSumInsured")
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("WholeSumInsured");

                            b1.HasKey("PolicyHistoryDeclareNo");

                            b1.ToTable("Details", "policy");

                            b1.WithOwner()
                                .HasForeignKey("PolicyHistoryDeclareNo");
                        });

                    b.Navigation("Business")
                        .IsRequired();

                    b.Navigation("DebitNote");

                    b.Navigation("Members")
                        .IsRequired();

                    b.Navigation("Policy");

                    b.Navigation("Premium")
                        .IsRequired();
                });

            modelBuilder.Entity("Gibs.Domain.Entities.PolicySMI", b =>
                {
                    b.HasOne("Gibs.Domain.Entities.PolicySection", null)
                        .WithMany("SMIs")
                        .HasForeignKey("DeclareNo", "SectionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Gibs.Domain.Entities.ProductSMI", null)
                        .WithMany()
                        .HasForeignKey("ProductId", "SectionId", "SmiId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Gibs.Domain.Entities.PolicySection", b =>
                {
                    b.HasOne("Gibs.Domain.Entities.PolicyHistory", "History")
                        .WithMany("Sections")
                        .HasForeignKey("DeclareNo")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Gibs.Domain.Entities.ProductSection", null)
                        .WithMany()
                        .HasForeignKey("ProductId", "SectionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.OwnsOne("Gibs.Domain.Entities.ExtendedFields", "ExFields", b1 =>
                        {
                            b1.Property<string>("PolicySectionDeclareNo")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("PolicySectionSectionId")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<decimal>("A1")
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("A1");

                            b1.Property<decimal>("A10")
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("A10");

                            b1.Property<decimal>("A11")
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("A11");

                            b1.Property<decimal>("A12")
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("A12");

                            b1.Property<decimal>("A13")
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("A13");

                            b1.Property<decimal>("A14")
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("A14");

                            b1.Property<decimal>("A15")
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("A15");

                            b1.Property<decimal>("A16")
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("A16");

                            b1.Property<decimal>("A17")
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("A17");

                            b1.Property<decimal>("A18")
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("A18");

                            b1.Property<decimal>("A19")
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("A19");

                            b1.Property<decimal>("A2")
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("A2");

                            b1.Property<decimal>("A20")
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("A20");

                            b1.Property<decimal>("A21")
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("A21");

                            b1.Property<decimal>("A22")
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("A22");

                            b1.Property<decimal>("A23")
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("A23");

                            b1.Property<decimal>("A24")
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("A24");

                            b1.Property<decimal>("A25")
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("A25");

                            b1.Property<decimal>("A26")
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("A26");

                            b1.Property<decimal>("A27")
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("A27");

                            b1.Property<decimal>("A28")
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("A28");

                            b1.Property<decimal>("A29")
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("A29");

                            b1.Property<decimal>("A3")
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("A3");

                            b1.Property<decimal>("A30")
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("A30");

                            b1.Property<decimal>("A31")
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("A31");

                            b1.Property<decimal>("A32")
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("A32");

                            b1.Property<decimal>("A33")
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("A33");

                            b1.Property<decimal>("A34")
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("A34");

                            b1.Property<decimal>("A35")
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("A35");

                            b1.Property<decimal>("A36")
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("A36");

                            b1.Property<decimal>("A37")
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("A37");

                            b1.Property<decimal>("A38")
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("A38");

                            b1.Property<decimal>("A39")
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("A39");

                            b1.Property<decimal>("A4")
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("A4");

                            b1.Property<decimal>("A40")
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("A40");

                            b1.Property<decimal>("A41")
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("A41");

                            b1.Property<decimal>("A42")
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("A42");

                            b1.Property<decimal>("A43")
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("A43");

                            b1.Property<decimal>("A44")
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("A44");

                            b1.Property<decimal>("A45")
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("A45");

                            b1.Property<decimal>("A46")
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("A46");

                            b1.Property<decimal>("A47")
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("A47");

                            b1.Property<decimal>("A48")
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("A48");

                            b1.Property<decimal>("A49")
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("A49");

                            b1.Property<decimal>("A5")
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("A5");

                            b1.Property<decimal>("A50")
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("A50");

                            b1.Property<decimal>("A6")
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("A6");

                            b1.Property<decimal>("A7")
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("A7");

                            b1.Property<decimal>("A8")
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("A8");

                            b1.Property<decimal>("A9")
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("A9");

                            b1.Property<string>("Field1")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("Field1");

                            b1.Property<string>("Field10")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("Field10");

                            b1.Property<string>("Field11")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("Field11");

                            b1.Property<string>("Field12")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("Field12");

                            b1.Property<string>("Field13")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("Field13");

                            b1.Property<string>("Field14")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("Field14");

                            b1.Property<string>("Field15")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("Field15");

                            b1.Property<string>("Field16")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("Field16");

                            b1.Property<string>("Field17")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("Field17");

                            b1.Property<string>("Field18")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("Field18");

                            b1.Property<string>("Field19")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("Field19");

                            b1.Property<string>("Field2")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("Field2");

                            b1.Property<string>("Field20")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("Field20");

                            b1.Property<string>("Field21")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("Field21");

                            b1.Property<string>("Field22")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("Field22");

                            b1.Property<string>("Field23")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("Field23");

                            b1.Property<string>("Field24")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("Field24");

                            b1.Property<string>("Field25")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("Field25");

                            b1.Property<string>("Field26")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("Field26");

                            b1.Property<string>("Field27")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("Field27");

                            b1.Property<string>("Field28")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("Field28");

                            b1.Property<string>("Field29")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("Field29");

                            b1.Property<string>("Field3")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("Field3");

                            b1.Property<string>("Field30")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("Field30");

                            b1.Property<string>("Field4")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("Field4");

                            b1.Property<string>("Field5")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("Field5");

                            b1.Property<string>("Field6")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("Field6");

                            b1.Property<string>("Field7")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("Field7");

                            b1.Property<string>("Field8")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("Field8");

                            b1.Property<string>("Field9")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("Field9");

                            b1.HasKey("PolicySectionDeclareNo", "PolicySectionSectionId");

                            b1.ToTable("Sections", "policy");

                            b1.WithOwner()
                                .HasForeignKey("PolicySectionDeclareNo", "PolicySectionSectionId");
                        });

                    b.Navigation("ExFields")
                        .IsRequired();

                    b.Navigation("History");
                });

            modelBuilder.Entity("Gibs.Domain.Entities.Product", b =>
                {
                    b.HasOne("Gibs.Domain.Entities.Class", null)
                        .WithMany("Products")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Gibs.Domain.Entities.MidClass", null)
                        .WithMany("Products")
                        .HasForeignKey("MidClassId");
                });

            modelBuilder.Entity("Gibs.Domain.Entities.ProductSMI", b =>
                {
                    b.HasOne("Gibs.Domain.Entities.ProductSection", "Section")
                        .WithMany("SMIs")
                        .HasForeignKey("ProductId", "SectionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Section");
                });

            modelBuilder.Entity("Gibs.Domain.Entities.ProductSection", b =>
                {
                    b.HasOne("Gibs.Domain.Entities.Product", null)
                        .WithMany("Sections")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Gibs.Domain.Entities.SalesChannel", b =>
                {
                    b.HasOne("Gibs.Domain.Entities.Branch", null)
                        .WithMany()
                        .HasForeignKey("BranchId");
                });

            modelBuilder.Entity("Gibs.Domain.Entities.SalesSubChannel", b =>
                {
                    b.HasOne("Gibs.Domain.Entities.SalesChannel", null)
                        .WithMany()
                        .HasForeignKey("ChannelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Gibs.Domain.Entities.Signature", b =>
                {
                    b.HasOne("Gibs.Domain.Entities.Blob", "Blob")
                        .WithMany()
                        .HasForeignKey("BlobId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Gibs.Domain.Entities.User", "User")
                        .WithMany("Signatures")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Blob");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Gibs.Domain.Entities.TemplateDoc", b =>
                {
                    b.HasOne("Gibs.Domain.Entities.Blob", "Blob")
                        .WithMany()
                        .HasForeignKey("BlobId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Blob");
                });

            modelBuilder.Entity("GroupUsers", b =>
                {
                    b.HasOne("Gibs.Domain.Entities.Group", null)
                        .WithMany()
                        .HasForeignKey("GroupID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Gibs.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("RolePermissions", b =>
                {
                    b.HasOne("Gibs.Domain.Entities.Permission", null)
                        .WithMany()
                        .HasForeignKey("PermissionID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Gibs.Domain.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Gibs.Domain.Entities.Class", b =>
                {
                    b.Navigation("MidClasses");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("Gibs.Domain.Entities.ControlAccount", b =>
                {
                    b.Navigation("Accounts");
                });

            modelBuilder.Entity("Gibs.Domain.Entities.DebitNote", b =>
                {
                    b.Navigation("History")
                        .IsRequired();
                });

            modelBuilder.Entity("Gibs.Domain.Entities.FxCurrency", b =>
                {
                    b.Navigation("Rates");
                });

            modelBuilder.Entity("Gibs.Domain.Entities.MidClass", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Gibs.Domain.Entities.PartyType", b =>
                {
                    b.Navigation("Parties");
                });

            modelBuilder.Entity("Gibs.Domain.Entities.Policy", b =>
                {
                    b.Navigation("DebitNotes");

                    b.Navigation("Histories");
                });

            modelBuilder.Entity("Gibs.Domain.Entities.PolicyHistory", b =>
                {
                    b.Navigation("Sections");
                });

            modelBuilder.Entity("Gibs.Domain.Entities.PolicySection", b =>
                {
                    b.Navigation("SMIs");
                });

            modelBuilder.Entity("Gibs.Domain.Entities.Product", b =>
                {
                    b.Navigation("Sections");
                });

            modelBuilder.Entity("Gibs.Domain.Entities.ProductSection", b =>
                {
                    b.Navigation("SMIs");
                });

            modelBuilder.Entity("Gibs.Domain.Entities.Region", b =>
                {
                    b.Navigation("Branches");
                });

            modelBuilder.Entity("Gibs.Domain.Entities.User", b =>
                {
                    b.Navigation("Approvals");

                    b.Navigation("Signatures");
                });
#pragma warning restore 612, 618
        }
    }
}
